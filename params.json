{"name":"Moman","tagline":"","body":"# Moman\r\n## Description\r\nThis is will eventually be a suite of tools to be used by an orthographic/grammatical checker and the checker itself. The tools are currently coded in Python, but I began to rewrite it in Lisp. Moman, the suite itself, will be consisted of the following tools:\r\n* *FineNight* is the FSA library.\r\n* A FST library. (Not yet implemented)\r\n* *ZSpell* is the orthographic checker.\r\n\r\n## FineNight\r\nThe *FineNight* library contains many algorithms for Finite State Automatons. That includes:\r\n* Union of two FSAs\r\n* Intersection of two FSAs\r\n* Complement of a FSAs\r\n* Difference of two FSAs\r\n* Reversal of a FSA\r\n* Closure of a FSA\r\n* Concatenation of two FSAs\r\n* Determination of a NFA\r\n* Equivalence test\r\n* Minimization algorithm\r\n* Construction of an IADFA from a sorted dictionary\r\n* Graphviz support\r\n* Error-Tolerant IADFA\r\nAlmost all algorithms were taken from the book *Introduction to Automata Theory, Languages, and Computation* [hopcroft01]. The minimization algorithm is an implementation of Brzozowski's method [<a href=\"#brzozowski\">2</a>]. In this method, the (possibly non-deterministic) automaton is reversed, determinized, reversed and determinized. I'll eventually add the Hopcroft's nlog(n) minimization algorithm [<a href=\"#hopcroft\">3</a>]\r\n\r\n[John E. Hopcroft](http://www.cs.cornell.edu/Info/Department/Annual95/Faculty/Hopcroft.html), <a href=\"http://theory.stanford.edu/~rajeev/\">Rajeev Motwani</a> and\r\n\t      <a href=\"http://www-db.stanford.edu/~ullman/\">Jefferey D. Ullman</a>, <a href=\"http://www-db.stanford.edu/~ullman/ialc.html\">Introduction to Automata Theory, Languages and Computation</a>, 2nd edition, Adison-Wesley, 2001.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}