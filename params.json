{"name":"Moman","tagline":"","body":"# Moman\r\n## Description\r\nThis was supposed to be a suite of tools to be used by an orthographic/grammatical checker and the checker itself. However, the project is mainly dead right now. But I encourage you to look through the code and use it as inspiration/reference. The tools are currently coded in Python, but I started a while back to rewrite it in Lisp (which will never be finished). Moman, the suite itself, consist of the following tools:\r\n\r\n* [FineNight](#finenight) is the FSA library.\r\n* A FST library. (Not yet implemented)\r\n* [ZSpell](#zspell) is the orthographic checker.\r\n\r\nMostly, the only part of the tools suite which is worthwhile mentioning is the \"Fast String Correction\" which is used by [Lucene's](https://lucene.apache.org/) FuzzyQuery. You can read about the inclusion of this project in Lucene by reading Michael McCandless's [article](http://blog.mikemccandless.com/2011/03/lucenes-fuzzyquery-is-100-times-faster.html).\r\n\r\n## FineNight\r\n<a name=\"finenight\"/>The *FineNight* library contains many algorithms for Finite State Automatons. That includes:\r\n* Union of two FSAs\r\n* Intersection of two FSAs\r\n* Complement of a FSAs\r\n* Difference of two FSAs\r\n* Reversal of a FSA\r\n* Closure of a FSA\r\n* Concatenation of two FSAs\r\n* Determination of a NFA\r\n* Equivalence test\r\n* Minimization algorithm\r\n* Construction of an IADFA from a sorted dictionary\r\n* Graphviz support\r\n* Error-Tolerant IADFA (starred in Michael McCandless's Mike MChttp://blog.mikemccandless.com/2011/03/lucenes-fuzzyquery-is-100-times-faster.html\r\n\r\nAlmost all algorithms were taken from the book [Introduction to Automata Theory, Languages, and Computation](#hopcroft01). The minimization algorithm is an implementation of [Brzozowski's method](#brzozowski). In this method, the (possibly non-deterministic) automaton is reversed, determinized, reversed and determinized. I'll eventually add the [Hopcroft's nlog(n) minimization algorithm](#hopcroft).\r\n\r\n## ZSpell\r\n<a name=\"zspell\"/><i>ZSpell</i> is meant to be a concurrent of <a href=\"http://aspell.sourceforge.net/\">aspell</a>, made by Kevin Atkinson. At this time, <i>ZSpell</i> can suggest words with a Levenshtein-distance of one. Before we were using [Kemal Oflazer's algorithm](#oflazer96errortolerant). This algorithm is very slow, but now we use a faster algorithm ([Schulz's and Mihov's algorithm](#schulz02fast)). However, only substitution, removal and insertion are used for the faster algorithm. It means that transpositions errors, like \"ehllo\" -> \"hello\", are considered as two operations. \r\n\r\nTODOs includes:\r\n* Add transposition errors for Levenshtein-distance algorithm.\r\n* Add phonetic errors (spelling by sound).\r\n* Add derivation errors.\r\n\r\n## References\r\n* <a name=\"hopcroft01\"/>[John E. Hopcroft](http://www.cs.cornell.edu/Info/Department/Annual95/Faculty/Hopcroft.html), <a href=\"http://theory.stanford.edu/~rajeev/\">Rajeev Motwani</a> and <a href=\"http://www-db.stanford.edu/~ullman/\">Jefferey D. Ullman</a>, <i><a href=\"http://www-db.stanford.edu/~ullman/ialc.html\">Introduction to Automata Theory, Languages and Computation</a></i>, 2nd edition, Adison-Wesley, 2001.\r\n* <a name=\"brzozowski\"/><a href=\"http://maveric.uwaterloo.ca/~brzozo/\">J. A. Brzozowski</a>,\r\n\t      <i>Canonical regular expressions and minimal state graphs for definite events</i>, \r\n\t      in Mathematical Theory of Automata, Volume 12 of MRI Symposia Series, \r\n\t      pp. 529-561,      Polytechnic Press, Polytechnic Institute of Brooklyn, N.Y.,\r\n\t      1962.\r\n* <a name=\"hopcroft\"/> <a href=\"http://www.cs.cornell.edu/Info/Department/Annual95/Faculty/Hopcroft.html\">\r\n\t\tJohn E. Hopcroft\r\n\t      </a>, \r\n\t      <a href=\"http://historical.ncstrl.org/litesite-data/stan/CS-TR-71-190.pdf\">\r\n\t\t<i>An n log n algorithm for minimizing the states in a finite automaton</i>\r\n\t      </a>, \r\n\t      in The Theory of Machines and Computations, Z. Kohavi (ed.), pp. 189-196, \r\n\t      Academic Press, 1971.\r\n* <a name=\"oflazer96errortolerant\"/>\r\n\t      <a href=\"http://www.nlp.cs.bilkent.edu.tr/~ko/\">Kemal Oflazer</a>,\r\n\t      <a href=\"http://citeseer.ist.psu.edu/oflazer96errortolerant.html\">\r\n\t\t<i>Error-tolerant Finite State Recognition with Applications to \r\n\t\t  Morphological Analysis and Spelling Correction</i>\r\n\t      </a>,\r\n\t      Computational Linguistics, 22(1), pp. 73--89, March, 1996.\r\n* <a name=\"schulz02fast\"/>\r\n\t      <a href=\"http://www.cis.uni-muenchen.de/people/schulz.html\">\r\n\t\tKlaus U. Schulz\r\n\t      </a> and \r\n\t      <a href=\"http://lml.bas.bg/~stoyan/\">Stoyan Mihov</a>,\r\n\t\t<a href=\"http://citeseer.ist.psu.edu/schulz02fast.html\">\r\n\t\t  <i>Fast String Correction with Levenshtein-Automata</i>,\r\n\t\t</a>\r\n\t\tInternational Journal of Document Analysis and Recognition, 5(1):67--85, 2002.\r\n* <a name=\"czech92optimal\"/>\r\n\t      <a href=\"http://sun.iinf.polsl.gliwice.pl/~zjc/\">\r\n\t\tZbigniew J. Czech\r\n\t      </a>,\r\n\t      <a href=\"http://www.itee.uq.edu.au/~havas/\">\r\n\t\tGeorge Havas\r\n\t      </a> and \r\n\t      Bohdan S. Majewski,\r\n\t      <a href=\"http://citeseer.ist.psu.edu/czech92optimal.html\">\r\n\t\t<i>An Optimal Algorithm for Generating Minimal Perfect Hash Functions</i>\r\n\t      </a>, Information Processing Letters, 43(5):257--264, 1992.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}